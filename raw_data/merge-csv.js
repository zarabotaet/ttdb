const fs = require("fs");
const path = require("path");

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –æ—Å–Ω–æ–≤–∞–Ω–∏–π
 * @returns {Map} Map —Å –∫–ª—é—á–∞–º–∏ "brand|model" –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Ä–∞–Ω–≥–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
 */
function loadPopularBlades() {
  const popularBladesFile = path.join(__dirname, "popular_blades.json");

  if (!fs.existsSync(popularBladesFile)) {
    console.log(
      "‚ö†Ô∏è –§–∞–π–ª —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –æ—Å–Ω–æ–≤–∞–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—Å–µ –æ—Å–Ω–æ–≤–∞–Ω–∏—è –±—É–¥—É—Ç –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –Ω–µ–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ"
    );
    return new Map();
  }

  try {
    const content = fs.readFileSync(popularBladesFile, "utf8");
    const data = JSON.parse(content);
    const popularMap = new Map();

    data.popular_blades.forEach((blade) => {
      const key = `${blade.brand}|${blade.model}`;
      popularMap.set(key, blade.rank);
    });

    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${popularMap.size} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –æ—Å–Ω–æ–≤–∞–Ω–∏–π`);
    return popularMap;
  } catch (error) {
    console.log(
      `‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –æ—Å–Ω–æ–≤–∞–Ω–∏–π: ${error.message}`
    );
    return new Map();
  }
}

/**
 * –ü–∞—Ä—Å–∏—Ç CSV —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
 * @param {string} filePath - –ø—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
 * @returns {Array} –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
 */
function parseCSV(filePath) {
  if (!fs.existsSync(filePath)) {
    console.log(`–§–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
    return [];
  }

  const content = fs.readFileSync(filePath, "utf8");
  const lines = content.trim().split("\n");

  if (lines.length <= 1) {
    console.log(`–§–∞–π–ª ${filePath} –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏`);
    return [];
  }

  const headers = lines[0].split(",");
  const data = [];

  for (let i = 1; i < lines.length; i++) {
    const values = lines[i].split(",");
    if (values.length >= 2 && values[0] && values[1]) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å Brand –∏ Model
      const row = {};
      headers.forEach((header, index) => {
        row[header] = values[index] || "";
      });
      data.push(row);
    }
  }

  return data;
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ CSV —Å—Ç—Ä–æ–∫—É
 * @param {Array} data - –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
 * @param {Array} headers - –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
 * @returns {string} CSV —Å—Ç—Ä–æ–∫–∞
 */
function arrayToCSV(data, headers) {
  const csvLines = [headers.join(",")];

  data.forEach((row) => {
    const values = headers.map((header) => row[header] || "");
    csvLines.push(values.join(","));
  });

  return csvLines.join("\n");
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –æ—Å–Ω–æ–≤–∞–Ω–∏—è (Brand + Model)
 * @param {Object} blade - –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Å–Ω–æ–≤–∞–Ω–∏—è
 * @returns {string} —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
 */
function getBladeKey(blade) {
  return `${blade.Brand}|${blade.Model}`;
}

/**
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–≤—É—Ö CSV —Ñ–∞–π–ª–æ–≤
 */
function mergeCSVFiles() {
  const stervinouFile = path.join(__dirname, "all_blades_stervinou.csv");
  const manualFile = path.join(__dirname, "manual_blades.csv");
  const outputFile = path.join(__dirname, "all_blades.csv");

  console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–æ–≤...");
  console.log(`üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫ 1: ${stervinouFile}`);
  console.log(`üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫ 2: ${manualFile}`);
  console.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${outputFile}`);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –æ—Å–Ω–æ–≤–∞–Ω–∏—è
  const popularBlades = loadPopularBlades();

  // –ü–∞—Ä—Å–∏–º –æ–±–∞ —Ñ–∞–π–ª–∞
  const stervinouData = parseCSV(stervinouFile);
  const manualData = parseCSV(manualFile);

  console.log(`üìä –î–∞–Ω–Ω—ã–µ –∏–∑ stervinou: ${stervinouData.length} –∑–∞–ø–∏—Å–µ–π`);
  console.log(`üìä –†—É—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${manualData.length} –∑–∞–ø–∏—Å–µ–π`);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É Popular)
  const headers =
    stervinouData.length > 0
      ? [...Object.keys(stervinouData[0]), "Popular", "Popularity Rank"]
      : manualData.length > 0
      ? [...Object.keys(manualData[0]), "Popular", "Popularity Rank"]
      : [
          "Brand",
          "Model",
          "Nb plies",
          "Weight (g)",
          "Thick. (mm)",
          "Ply 1",
          "Ply 2",
          "Ply 3",
          "Ply 4",
          "Ply 5",
          "Ply 6",
          "Ply 7",
          "Ply 8",
          "Ply 9",
          "Popular",
          "Popularity Rank",
        ];

  // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Å–Ω–æ–≤–∞–Ω–∏–π
  const bladesMap = new Map();
  let addedCount = 0;
  let overriddenCount = 0;
  let popularCount = 0;

  // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ stervinou
  stervinouData.forEach((blade) => {
    const key = getBladeKey(blade);
    const popularityRank = popularBlades.get(key);
    const enhancedBlade = {
      ...blade,
      Popular: popularityRank ? "Yes" : "No",
      "Popularity Rank": popularityRank || "",
      source: "stervinou",
    };

    if (popularityRank) {
      popularCount++;
    }

    bladesMap.set(key, enhancedBlade);
    addedCount++;
  });

  // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º/–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä—É—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã—à–µ)
  manualData.forEach((blade) => {
    const key = getBladeKey(blade);
    const popularityRank = popularBlades.get(key);
    const enhancedBlade = {
      ...blade,
      Popular: popularityRank ? "Yes" : "No",
      "Popularity Rank": popularityRank || "",
      source: "manual",
    };

    if (bladesMap.has(key)) {
      console.log(`üîÑ –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º: ${blade.Brand} ${blade.Model}`);
      overriddenCount++;
    } else {
      console.log(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ: ${blade.Brand} ${blade.Model}`);
      addedCount++;
      if (popularityRank) {
        popularCount++;
      }
    }
    bladesMap.set(key, enhancedBlade);
  });

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—Å—Å–∏–≤ –∏ —É–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ –ø–æ–ª–µ source
  const mergedData = Array.from(bladesMap.values()).map((blade) => {
    const { source, ...cleanBlade } = blade;
    return cleanBlade;
  });

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±—Ä–µ–Ω–¥—É, –∑–∞—Ç–µ–º –ø–æ –º–æ–¥–µ–ª–∏
  mergedData.sort((a, b) => {
    if (a.Brand !== b.Brand) {
      return a.Brand.localeCompare(b.Brand);
    }
    return a.Model.localeCompare(b.Model);
  });

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const csvContent = arrayToCSV(mergedData, headers);
  fs.writeFileSync(outputFile, csvContent, "utf8");

  console.log("\n‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
  console.log(`üìä –ò—Ç–æ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${mergedData.length}`);
  console.log(`üîÑ –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ: ${overriddenCount}`);
  console.log(`‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã—Ö –æ—Å–Ω–æ–≤–∞–Ω–∏–π: ${popularCount}`);
  console.log(`üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${outputFile}`);

  return outputFile;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  try {
    mergeCSVFiles();
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤:", error.message);
    process.exit(1);
  }
}

module.exports = { mergeCSVFiles, loadPopularBlades };
